/* global describe, test, jest, expect, beforeEach */

const initTeam = require('../../lib/team/')
const onBroadcastInit = require('../../lib/on-broadcast')
const LoginInfo = require('../../login-info')
const EventEmitter = require('events')
const socket = new EventEmitter()

describe('[TEAM] [ON-USER-INVITE] ', () => {
  beforeEach(() => {
    const loginInfo = new LoginInfo()
    loginInfo.setContacts({ teamOne: { userId: 'userOne' } })
    const onBroadcast = onBroadcastInit(socket)
    const { onUserInvited } = initTeam({ onBroadcast, loginInfo })
    this.onUserInvited = onUserInvited
  })

  test('logs WARN if no argument was provided', async () => {
    const mockCb = jest.fn()
    global.console = { log: mockCb }
    this.onUserInvited()
    expect(mockCb.mock.calls.length).toBe(1)
    expect(mockCb.mock.calls[0][0]).toMatch(/WARN/)
  })
  test('runs when some user was invited', async () => {
    const mockCb = jest.fn()
    this.onUserInvited(mockCb)
    const message = {
      teamId: 'teamOne',
      data: { userId: 'userTwo', email: 'yo@ya.ru' }
    }
    socket.emit('team::user-invited', message)
    expect(mockCb.mock.calls.length).toBe(1)
  })

  test('runs when bot was invited', async () => {
    const mockCb = jest.fn()
    this.onUserInvited(mockCb)
    const message = {
      teamId: 'teamOne',
      data: { userId: 'userOne', email: 'yo@ya.ru' }
    }
    socket.emit('team::user-invited', message)
    expect(mockCb.mock.calls.length).toBe(1)
  })

  test('runs when bot was invited when self is provided', async () => {
    const mockCb = jest.fn()
    this.onUserInvited({ self: true }, mockCb)
    const message = {
      teamId: 'teamOne',
      data: { userId: 'userOne', email: 'yo@ya.ru' }
    }
    socket.emit('team::user-invited', message)
    expect(mockCb.mock.calls.length).toBe(1)
  })

  test('doesnt run if other user was invited when self is provided', async () => {
    const mockCb = jest.fn()
    this.onUserInvited({ self: true }, mockCb)
    const message = {
      teamId: 'teamOne',
      data: { userId: 'userTwo', email: 'yo@ya.ru' }
    }
    socket.emit('team::user-invited', message)
    expect(mockCb.mock.calls.length).toBe(0)
  })
})
