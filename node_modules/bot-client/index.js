const socketio = require('socket.io-client')
const LoginInfo = require('./login-info')
const initApi = require('./lib')
const initBroadcast = require('./lib/on-broadcast')
const initChannelApi = require('./lib/channel-api')
const initCommand = require('./lib/command')
function init () {
  let socket = null
  let onLoginCb = null

  function connect (creds = {}, opts = {}) {
    const { email, password } = creds
    if (!email || !password) {
      throw new Error('Credentials is required')
    }
    let endpoint = 'http://wss-bots.bots:3000'
    if (process.env.WS_ENDPOINT) {
      endpoint = process.env.WS_ENDPOINT
    }

    socket = socketio(endpoint, {query: `email=${email}&password=${password}`})
    socket.on('connect', () => {
      console.log('connected')
    })

    const loginInfo = new LoginInfo()
    socket.on('login', data => {
      if (onLoginCb) {
        onLoginCb(data)
      }
      loginInfo.setContacts(data)
    })
    socket.on('disconnect', reason => {
      console.log(`socket_disconnected ${reason}`)
    })
    socket.on('connect_error', error => {
      console.log(`connect_error ${error}`)
    })
    socket.on('reconnect_attempt', number => {
      console.log(`socket reconnect_attempt ${number}`)
    })
    socket.on('error', reason => {
      console.log(`socket error ${reason}`)
    })
    // const command = initCommand(socket)
    const onBroadcast = initBroadcast(socket)
    const command = initCommand(socket)

    const api = initApi({ onBroadcast, loginInfo, command })
    api.comment.onEcho(async message => {
      try {
        const { teamId } = message
        const to = message.data.content.from
        const textReceived = message.data.content.att[0].data.text
        const text = textReceived.replace('/echo', '')
        const att = [{ type: 'text', data: { text } }]
        await api.comment.create(teamId, { to, att })
      } catch (err) {
        console.log('echo error', err.stack || err)
      }
    })

    if (creds.channelToken) {
      api.asChannel = initChannelApi(creds)
    }
    return api
  }
  function disconnect () {
    socket && socket.disconnect()
  }

  function onLogin (cb) {
    if (typeof cb !== 'function') {
      throw new Error('onLogin argument must be a function')
    }
    onLoginCb = cb
  }

  return {
    connect,
    disconnect,
    onLogin
  }
}

module.exports = init()
